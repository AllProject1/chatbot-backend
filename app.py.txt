from flask import Flask, request, jsonify
import nltk
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import pandas as pd
import re

# Download the punkt tokenizer from nltk (first-time use)
nltk.download('punkt')

# Initialize Flask app
app = Flask(__name__)

# Load the CSV data into a pandas DataFrame
# Assuming your dataset CSV is named 'ChatbotDataset.csv' and it's in the same directory
df = pd.read_csv("ChatbotDataset.csv")

# Convert questions to lowercase for case-insensitive matching
df['Question'] = df['Question'].str.lower()

# Initialize Sentence Transformer model for embeddings
model = SentenceTransformer('all-MiniLM-L6-v2')

# Create embeddings for all questions in the dataset
question_embeddings = model.encode(df['Question'].tolist())

# Define a function to match the user's input to a question in the dataset
def match_question(user_input):
    # Get embedding for the user input
    user_embedding = model.encode([user_input.lower()])

    # Calculate cosine similarity between the user's input embedding and all question embeddings
    similarities = cosine_similarity(user_embedding, question_embeddings)

    # Get the index of the most similar question
    most_similar_index = similarities.argmax()

    # If similarity is below a certain threshold, consider it an unknown question
    if similarities[0][most_similar_index] < 0.5:  # You can adjust this threshold as needed
        return "Sorry, I don't have an answer for that. Can you please ask differently?"
    else:
        # Return the corresponding answer for the most similar question
        return df['Answer'][most_similar_index]

# Function to generate explanation for fractions and mixed numbers
def handle_fraction(fraction):
    try:
        # Assuming input is a string in the format 'numerator/denominator'
        numerator, denominator = map(int, fraction.split('/'))

        # Handle negative fractions
        is_negative = numerator < 0
        numerator = abs(numerator)

        # Convert improper fraction to mixed number
        whole_number = numerator // denominator
        remainder = numerator % denominator

        if numerator > denominator:
            fraction_type = "improper"
        else:
            fraction_type = "proper"

        # Constructing the explanation of the number line representation
        explanation = (
            f" Understand the fraction:\n    {fraction} is a {fraction_type} fraction. This means that {numerator} is {'larger' if fraction_type == 'improper' else 'smaller'} than {denominator}.\n\n"
            f" Convert to a mixed number:\n    When we divide {numerator} by {denominator}, we get: {numerator} รท {denominator} = {whole_number} with a remainder of {remainder}.\n\n"
            f"    So, {fraction} is the same as {whole_number} {remainder}/{denominator}.\n\n"
            f" On the number line, start by locating {'-' if is_negative else ''}{whole_number}.\n\n"
            f" Divide the space between {'-' if is_negative else ''}{whole_number} and {'-' if is_negative else ''}{whole_number + 1} into {denominator} equal parts.\n\n"
            f" Move {remainder} parts to the {'left' if is_negative else 'right'}. This brings you to {'-' if is_negative else ''}{whole_number} {remainder}/{denominator} on the number line.\n\n"
            f" Final Answer:\n    The point where you land is {'-' if is_negative else ''}{whole_number} {remainder}/{denominator}, which represents {fraction} on the number line."
        )

        return explanation
    except ValueError:
        return None

# Route for chatbot communication
@app.route("/chat", methods=["POST"])
def chat():
    user_input = request.json.get("user_input", "").lower()
    
    # If the user input contains a fraction, handle it
    fraction_match = re.search(r'-?\d+/\d+', user_input)

    if fraction_match:
        fraction = fraction_match.group()
        matched_answer = handle_fraction(fraction)
        if matched_answer:
            return jsonify({"response": matched_answer})
        else:
            return jsonify({"response": "It looks like there was an issue with the fraction format. Please try again."})
    else:
        # General question matching
        response = match_question(user_input)
        return jsonify({"response": response})

if __name__ == "__main__":
    # Start the Flask app (default: localhost on port 5000)
    app.run(debug=True, host='0.0.0.0', port=5000)
